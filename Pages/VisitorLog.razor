@page "/visitorlog"
@using System.Globalization
@using OpenVisitor.Contracts
@inject Debouncer SearchDebouncer
@* @inject VisitorLogService VisitorLogService; *@
@inject HttpClient Http;

<style>
.foo {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}
.foo2 {
    display: flex;
    justify-content: flex-end;
}
.foo .mdc-text-field, .foo .mdc-button {
    height: 40px;
}
.foo .mdc-floating-label--float-above {
    transform: translateY(-26.75px) translateX(-0px) scale(.75) !important;
}
</style>

<div class="mat-layout-grid">
    <div class="mdc-layout-grid__cell">
        <div class="foo">
            <MatDatePicker2 Value="FilterDate" ValueChanged="FilterDateChagned" Format="yyyy-MM-dd"
                            EnableWeekNumbers="true" Outlined="true"></MatDatePicker2>
            <div class="foo2">
                <MatTextField2 Value="@FilterText" ValueChanged="@SearchTextChanged" Label="Search"></MatTextField2>
                <MatButton Outlined="true" Link="visitorlog/new">New visitor</MatButton>
            </div>
        </div>

        <div>
            <MatTable Items="@visitors" class="visitors-grid mat-elevation-z5" PageSize="10">
                <MatTableHeader>
                    <th nowrap>Name</th>
                    <th nowrap>Host</th>
                    <th nowrap>Signed in</th>
                    <th nowrap>Signed out</th>
                </MatTableHeader>
                <MatTableRow>
                    <td nowrap>@context.Name</td>
                    <td nowrap>@context.Host</td>
                    <td nowrap>@context.SignedInAt.ToString("yyyy-MM-dd HH:mm")</td>
                    <td nowrap>@context.SignedOutAt?.ToString("yyyy-MM-dd HH:mm")</td>
                </MatTableRow>
            </MatTable>
        </div>
    </div>
</div>

@code {
    IEnumerable<Visitor> visitors = new Visitor[0];
    string FilterText = "";
    DateTime FilterDate = DateTime.Now;
    protected override void OnInitialized()
    {
        FilterVisitors();
    }

    void FilterDateChagned(DateTime ea)
    {
        FilterDate = ea.AddHours(1); // Fix weird datetime bug in MatDatePicker
        FilterVisitors();
    }

    void SearchTextChanged(string text)
    {
        SearchDebouncer.Debounce(300, () => {
            FilterText = text;
            FilterVisitors();
        });
    }

    void FilterVisitors()
    {
        InvokeAsync(async () => {
            this.visitors = await Http.GetJsonAsync<IEnumerable<Visitor>>("api/visitors"); //await VisitorLogService.GetVisitorLog(FilterDate, FilterText);
            StateHasChanged();
        });
    }
}
